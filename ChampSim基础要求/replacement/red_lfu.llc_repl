#include "LFUUtil.h"
#include "cache.h"

ReD_Replacement ReD;

// initialize replacement state
void CACHE::llc_initialize_replacement() {
  // 初始化 ReD
  ReD.initialize();
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set,
                                const BLOCK *current_set, uint64_t ip,
                                uint64_t full_addr, uint32_t type) {
  // 判断是否需要 bypass
  if (ReD.bypass(full_addr, ip, type)) {
    return LLC_WAY;
  }
  uint32_t way = 0;

  // 现在当前的 set 里找一个还没有用过的 way
  for (way = 0; way < NUM_WAY; way++) {
    if (block[set][way].valid == false) {

      DP(if (warmup_complete[cpu]) {
        cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id
             << " invalid set: " << set << " way: " << way;
        cout << hex << " address: " << (full_addr >> LOG2_BLOCK_SIZE)
             << " victim address: " << block[set][way].address
             << " data: " << block[set][way].data;
        cout << dec << " lru: " << block[set][way].lru << endl;
      });

      break;
    }
  }

  // 如果当前 set 中的所有 way 都已经使用了 则需要替换出去一个最近最少使用过的
  // way
  uint32_t min_freq = 1e9;
  if (way == NUM_WAY) {
    for (int i = 0; i < NUM_WAY; i++) {
      if (block[set][i].lru < min_freq) {
        way = i;
        min_freq = block[set][i].lru;
      }
    }
  }

  DP(if (warmup_complete[cpu]) {
    cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id
         << " replace set: " << set << " way: " << way;
    cout << hex << " address: " << (full_addr >> LOG2_BLOCK_SIZE)
         << " victim address: " << block[set][way].address
         << " data: " << block[set][way].data;
    cout << dec << " lru: " << block[set][way].lru << endl;
  });

  if (way == NUM_WAY) {
    cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set
         << endl;
    assert(0);
  }

  return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set,
                                         uint32_t way, uint64_t full_addr,
                                         uint64_t ip, uint64_t victim_addr,
                                         uint32_t type, uint8_t hit) {
  string TYPE_NAME;
  if (type == LOAD)
    TYPE_NAME = "LOAD";
  else if (type == RFO)
    TYPE_NAME = "RFO";
  else if (type == PREFETCH)
    TYPE_NAME = "PF";
  else if (type == WRITEBACK)
    TYPE_NAME = "WB";
  else
    assert(0);

  if (hit)
    TYPE_NAME += "_HIT";
  else
    TYPE_NAME += "_MISS";

  if ((type == WRITEBACK) && ip)
    assert(0);

  // uncomment this line to see the LLC accesses
  // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " <<
  // setw(5) << set << " way: " << setw(2) << way; cout << hex << " paddr: " <<
  // setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " <<
  // victim_addr << dec << endl;

  // Do not update when bypassing
  if (way == 16)
    return;

  // Write-backs do not change rrpv
  if (type == WRITEBACK)
    return;

  // return lru_update(set, way);
  block[set][way].lru++;
}

void CACHE::llc_replacement_final_stats() {}
